/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useTetsuContext, TetsuContext } from "./tetsuContext";
import type * as Fetcher from "./tetsuFetcher";
import { tetsuFetch } from "./tetsuFetcher";
import type * as Schemas from "./tetsuSchemas";

export type GetUsersQueryParams = {
  /*
   * 有効フラグ
   */
  is_enabled?: boolean;
};

export type GetUsersError = Fetcher.ErrorWrapper<undefined>;

export type GetUsersResponse = Schemas.User[];

export type GetUsersVariables = {
  queryParams?: GetUsersQueryParams;
} & TetsuContext["fetcherOptions"];

/**
 * hogehoge
 */
export const fetchGetUsers = (variables: GetUsersVariables) =>
  tetsuFetch<
    GetUsersResponse,
    GetUsersError,
    undefined,
    {},
    GetUsersQueryParams,
    {}
  >({ url: "/users", method: "get", ...variables });

/**
 * hogehoge
 */
export const useGetUsers = <TData = GetUsersResponse>(
  variables: GetUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetUsersResponse, GetUsersError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useTetsuContext(options);
  return reactQuery.useQuery<GetUsersResponse, GetUsersError, TData>(
    queryKeyFn({ path: "/users", operationId: "getUsers", variables }),
    () => fetchGetUsers({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PostUsersError = Fetcher.ErrorWrapper<undefined>;

export type PostUsersRequestBody = Schemas.RegisterUser[];

export type PostUsersVariables = {
  body?: PostUsersRequestBody;
} & TetsuContext["fetcherOptions"];

/**
 * ユーザ情報を登録します
 */
export const fetchPostUsers = (variables: PostUsersVariables) =>
  tetsuFetch<Schemas.Success, PostUsersError, PostUsersRequestBody, {}, {}, {}>(
    { url: "/users", method: "post", ...variables }
  );

/**
 * ユーザ情報を登録します
 */
export const usePostUsers = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Success,
      PostUsersError,
      PostUsersVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useTetsuContext();
  return reactQuery.useMutation<
    Schemas.Success,
    PostUsersError,
    PostUsersVariables
  >(
    (variables: PostUsersVariables) =>
      fetchPostUsers({ ...fetcherOptions, ...variables }),
    options
  );
};

export type QueryOperation = {
  path: "/users";
  operationId: "getUsers";
  variables: GetUsersVariables;
};
